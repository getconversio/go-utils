package bq

import (
	"encoding/base64"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"sync"
	"testing"

	"cloud.google.com/go/bigquery"
	logtest "github.com/sirupsen/logrus/hooks/test"
	"github.com/getconversio/go-utils/util"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"gopkg.in/jarcoal/httpmock.v1"
)

var (
	logtestOnce sync.Once
	logHook     *logtest.Hook
)

func noResponder(r *http.Request) (*http.Response, error) {
	fmt.Printf("Url: %s\n", r.URL)
	fmt.Printf("Method: %s\n", r.Method)
	return nil, errors.New("No responder found")
}

func setup() {
	logtestOnce.Do(func() {
		logHook = logtest.NewGlobal()
	})

	// Activate the http mock
	httpmock.Activate()
	httpmock.RegisterNoResponder(noResponder)

	os.Setenv("BIGQUERY_STREAMING_MAX_DELAY", "10")
	httpmock.RegisterResponder("POST", "https://accounts.google.com/o/oauth2/token",
		httpmock.NewStringResponder(200, `{"access_token": "abcd", "token_type":"bearer"}`))
}

func teardown() {
	httpmock.DeactivateAndReset()
	Close()
	logHook.Reset()
}

func TestSetup(t *testing.T) {
	setup()
	defer teardown()

	// Create an empty wrapper (this fetches an oauth token)
	wrapper := Setup()
	assert.NotNil(t, wrapper)

	prevEnv := os.Getenv("BIGQUERY_SERVICE_ACCOUNT")
	defer os.Setenv("BIGQUERY_SERVICE_ACCOUNT", prevEnv)

	saFile, err := ioutil.ReadFile(os.Getenv("BIGQUERY_SERVICE_ACCOUNT"))
	require.NoError(t, err)

	saFileEncoded := base64.StdEncoding.EncodeToString(saFile)
	err = os.Setenv("BIGQUERY_SERVICE_ACCOUNT", saFileEncoded)
	require.NoError(t, err)

	// Create a wrapper using a base64 encoded JSON file.
	wrapper = Setup()
	assert.NotNil(t, wrapper)
}

func TestClose(t *testing.T) {
	SetupStreamingInserts()

	// Test that we can close twice without error
	Close()
	Close()
}

func TestBigqueryWrapper(t *testing.T) {
	setup()
	defer teardown()

	// Set up a new wrapper and get the current machine's hostname
	wrapper := Setup()
	hostname, err := os.Hostname()
	require.NoError(t, err)
	hostname = util.Hash32(hostname)

	// TableID should be prefixed if specified
	wrapper.UseTablePrefix(true)
	tableId := wrapper.TableId("mytable")
	assert.Equal(t, fmt.Sprintf("%s_mytable", hostname), tableId)

	// Use non-prefixed tables for the rest of the tests
	wrapper.UseTablePrefix(false)
	tableId = wrapper.TableId("mytable")
	assert.Equal(t, "mytable", tableId)

	// Table should be a bigquery table
	table := wrapper.Table("mytable")
	assert.IsType(t, new(bigquery.Table), table)
	assert.Equal(t, "some-project", table.ProjectID)
	assert.Equal(t, "some_dataset", table.DatasetID)
	assert.Equal(t, "mytable", table.TableID)

	// AddRow should insert a row
	m := "POST"
	u := "https://www.googleapis.com/bigquery/v2/projects/some-project/datasets/some_dataset/tables/mytable/insertAll"
	u2 := "https://www.googleapis.com/bigquery/v2/projects/some-project/datasets/some_dataset/tables/mytable2/insertAll"
	httpmock.RegisterResponder(m, u, httpmock.NewStringResponder(200, `{}`))

	// Bigquery returns 200 respondes, even for errors.
	httpmock.RegisterResponder(m, u2, httpmock.NewStringResponder(200, `{
  "kind": "bigquery#tableDataInsertAllResponse",
  "insertErrors": [
    {
      "index": 0,
      "errors": [
        {
          "reason": "invalid",
          "location": "id",
          "debugInfo": "generic::not_found: no such field.",
          "message": "no such field."
        }
      ]
    }
  ]
}`))
	SetupStreamingInserts()

	myStruct := struct {
		ID string `bigquery:"id"`
	}{"abcd"}
	err = wrapper.AddRow("mytable", myStruct)
	assert.NoError(t, err)

	util.ValidateWithTimeout(t, func() bool {
		info := httpmock.GetCallCountInfo()
		if cnt, ok := info[fmt.Sprintf("%s %s", m, u)]; ok {
			return cnt == 1
		}
		return false
	}, 1000)

	err = wrapper.AddRow("mytable2", myStruct)
	assert.NoError(t, err)

	util.ValidateWithTimeout(t, func() bool {
		info := httpmock.GetCallCountInfo()
		if cnt, ok := info[fmt.Sprintf("%s %s", m, u2)]; ok {
			return cnt == 1 && len(logHook.Entries) > 0
		}
		return false
	}, 1000)

	lastLog := logHook.LastEntry()
	assert.Contains(t, lastLog.Message, "bigquery row insert error")
	assert.Contains(t, lastLog.Message, "no such field")
	assert.Equal(t, "some-project", lastLog.Data["project"])
	assert.Equal(t, "some_dataset", lastLog.Data["dataset"])
	assert.Equal(t, "mytable2", lastLog.Data["table"])
	assert.Contains(t, lastLog.Data, "insertid") // Generated by bqstreamer
}
